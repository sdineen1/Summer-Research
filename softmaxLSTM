#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Aug 17 07:38:00 2018

@author: shaydineen
"""

import pandas as pd
import numpy as np
import math as math

dataset = pd.read_csv('ETF_Opportunity_Set/SameTrain/spy_feature_selection.csv')
onehot = pd.read_csv('ETF_Opportunity_Set/SameTrain/spy_onehot.csv')
data = dataset.iloc[:-1,1:].values #-1 because we need to remove the last row.  We need to remove the last row because if we didn't remove the last data point, the last data point would not have a corresponding index in the onehot enocding
data = np.array(data)
onehot_data = np.array(onehot)

from sklearn.preprocessing import MinMaxScaler

sc = MinMaxScaler(feature_range = (0,1))

data_scaled = sc.fit_transform(data)

#from sklearn.model_selection import train_test_split
#x_train_scaled, x_test_scaled = train_test_split(data_scaled, test_size = .2)

from keras.layers import Dense

def X_y_vectors(time_steps, data_scaled, num_feature, one_hot):
    #assumes the variable that we are trying to predict is in the 0 index
    X = []
    onehot = []
    
    for i in range(time_steps, int(len(data_scaled))):
        X.append(data_scaled[i-time_steps:i,0:num_feature])           
        onehot.append(one_hot[i-1,0])   #minus one because onehot index i is the next days buy or sell                        

    X, onehot = np.array(X), np.array(onehot)
    X = np.reshape(X, (X.shape[0], X.shape[1], num_feature))
    
    return X, onehot

from keras.models import Sequential
from keras.layers import LSTM, Dense, Dropout

def compile_regressor(units, shape, dropout_rate, optim):
    
    regressor = Sequential()
    
    regressor.add(LSTM(units=units, return_sequences=True, input_shape = (shape.shape[1], shape.shape[2])))
    regressor.add(Dropout(dropout_rate))
    
    regressor.add(LSTM(units = units, return_sequences = True))
    regressor.add(Dropout(dropout_rate))

    regressor.add(LSTM(units = units, return_sequences = True))
    regressor.add(Dropout(dropout_rate))
    
    regressor.add(LSTM(units = units, return_sequences = True))
    regressor.add(Dropout(dropout_rate))

    regressor.add(LSTM(units = units))
    regressor.add(Dropout(dropout_rate))
    
    regressor.add(Dense(units = 1, activation = 'sigmoid'))
    
    regressor.compile(optimizer=optim, loss = 'binary_crossentropy', metrics=['accuracy'])
    
    
    return regressor

def train_regressor(compiled_regressor , X_train, y_train, epochs, batch_size):
    
        regressor=compiled_regressor
        regressor.fit(X_train, y_train, epochs = epochs, batch_size = batch_size)
        return regressor


def sliding_window(X, onehot, train_size, test_size):
    #train_size and test_size are ints
    
    predictions = []
    actual_price = []
    #This is the sliding-window for-loop.  The for-loop starts at 0 and goes to legnth of X minus the size of the additive total of the size of the trainign and sets
    #i is then incremented by the size of the test set
    for i in range (0, int(len(X))-(training_set_size+test_size),test_size):
        
        
        print(i)
        
        
        X_train = X[i:i+training_set_size, :, :]
        onehot_train = onehot[i:i+training_set_size]
        X_test = X[i+training_set_size:i+training_set_size+test_size, :, :]
        onehot_test = onehot[i+training_set_size: i + training_set_size + test_size]

    
        regressor = compile_regressor(units = 200, shape = X_train, dropout_rate = .2, optim = 'adam')
        regressor = train_regressor(compiled_regressor = regressor, X_train = X_train, y_train = onehot_train, epochs = 100 , batch_size = 1)
    
        predicted = regressor.predict(X_test)
        predicted = predicted[:,0]
        predictions.append([predicted])
        
        actual_price.append(onehot_test)
        

    return predictions, actual_price


training_set_size = 2000
test_set_size = 250
time_steps = 90

X, onehot = X_y_vectors(time_steps = time_steps, data_scaled = data, num_feature = data.shape[1], one_hot = onehot_data)

predictions, actual = sliding_window(X = X, 
                          onehot = onehot, 
                          train_size = training_set_size, 
                          test_size = test_set_size)

predictions, actual = np.array(predictions), np.array(actual)

predictions, actual = np.reshape(predictions, newshape = (-1, 1)), np.reshape(actual, newshape = (-1 , 1))


y = np.column_stack((predictions, actual))

filepath = 'ETF_Opportunity_Set/LSTMoutput.csv'
df = pd.DataFrame(y)
df.to_csv(filepath, index=False)